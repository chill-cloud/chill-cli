package client

import (
	"fmt"
	"github.com/chill-cloud/chill-cli/pkg/util"
	"github.com/chill-cloud/chill-cli/pkg/version"
	copy2 "github.com/otiai10/copy"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
)

type Integration interface {
	GenerateClient(protoSource, src, name string) error
}

var clientIntegrationMap = map[string]Integration{}

func ForName(name string) Integration {
	return clientIntegrationMap[name]
}

func Register(name string, integration Integration) {
	clientIntegrationMap[name] = integration
}

func GenerateClient(i Integration, protoSource, src, name string, v version.Version) error {
	t, err := ioutil.TempDir("", "chill-tmp")
	if err != nil {
		return err
	}
	defer os.RemoveAll(t)
	err = copy2.Copy(filepath.Join(src, ".git"), filepath.Join(t, ".git"))
	if err != nil {
		return err
	}
	err = i.GenerateClient(protoSource, t, name)
	if err != nil {
		return err
	}
	tag := fmt.Sprintf("chill-%s", v.String())
	cmd := exec.Command("git", "add", "-A")
	cmd.Dir = t
	err = util.RunCmdDetailed(cmd)
	if err != nil {
		return err
	}
	cmd = exec.Command("git", "commit", "--allow-empty", "-am", "Generated by Chill")
	cmd.Dir = t
	err = util.RunCmdDetailed(cmd)
	if err != nil {
		return err
	}
	cmd = exec.Command("git", "tag", tag, "-m", "Generated by Chill")
	cmd.Dir = t
	err = util.RunCmdDetailed(cmd)
	if err != nil {
		return err
	}
	cmd = exec.Command("git", "push", "origin", "tag", tag)
	cmd.Dir = t
	err = util.RunCmdDetailed(cmd)
	if err != nil {
		return err
	}
	return nil
}
